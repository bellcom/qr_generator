<?php

/**
 * @file
 * Contains qr_generator.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\qr_generator\Entity\QRGenerator;
use GuzzleHttp\Client;
use GuzzleHttp\Exception\BadResponseException;
use GuzzleHttp\Exception\RequestException;

/**
 * Implements hook_help().
 */
function qr_generator_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the qr_generator module.
    case 'help.page.qr_generator':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Module for creating QR codes') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_presave();
 */
function qr_generator_entity_presave(\Drupal\qr_generator\Entity\QRGenerator $entity) {
  if ($entity->isNew()) {
    $url = str_replace(' ', '-', $entity->getName());
    $url = str_replace(array('æ', 'ø', 'å', ' '), array('ae', 'oe', 'aa', '-'), $entity->getName());
    $url = preg_replace('/[^A-Za-z0-9\-]/', '', $url);
    $url = strtolower($url);
    $entity->setIncomingURL($url);
  }
}

/**
 * Implements hook_cron().
 */
function qr_generator_cron() {
	$client = new GuzzleHttp\Client();

	$qr_codes = QRGenerator::loadMultiple();

  // Collect statuses and ID's
	foreach ($qr_codes as $qr_code) {
		try {
			$res = $client->request('GET', $qr_code->getOutgoingURL()->toString());
			$status = $res->getStatusCode();
		} catch (BadResponseException $e) {
			$status = $e->getResponse()->getStatusCode();
		} catch (RequestException $e) {
			$status = '?'; // Some other error
		}

    $status = '200' ? 'OK' : 'FAILED';

    $qr_code->setURLStatus($status);
    $qr_code->save();
	}
}
