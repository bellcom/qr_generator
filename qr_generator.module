<?php

/**
 * @file
 * Contains qr_generator.module..
 */

require_once __DIR__ . '/vendor/autoload.php';

use Drupal\Component\Utility\SafeMarkup;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\qr_generator\Entity\QRGenerator;
use Drupal\user\Entity\User;
use GuzzleHttp\Client;
use GuzzleHttp\Exception\BadResponseException;
use GuzzleHttp\Exception\RequestException;
use Drupal\file\Entity\File;
use PHPQRCode\QRcode;

/**
 * Implements hook_help().
 */
function qr_generator_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the qr_generator module.
    case 'help.page.qr_generator':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Module for creating QR codes') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_presave();
 */
function qr_generator_entity_presave(\Drupal\qr_generator\Entity\QRGenerator $entity) {
  if ($entity->isNew()) {
    $url = str_replace(' ', '-', $entity->getName());
    $url = str_replace(array('æ', 'ø', 'å', ' '), array('ae', 'oe', 'aa', '-'), $entity->getName());
    $url = preg_replace('/[^A-Za-z0-9\-]/', '', $url);
    $url = strtolower($url);
    $entity->setIncomingURL($url);
  }
}

/**
 * Implements hook_entity_insert();
 */
function qr_generator_entity_insert(\Drupal\qr_generator\Entity\QRGenerator $entity) {
  $img_dir = sprintf('public://%s', date("Y-m"));
  $dest_uri = sprintf('%s/%s.png', $img_dir, $entity->getName());

  file_prepare_directory($img_dir, FILE_CREATE_DIRECTORY);

  // Create a new image
  $data = qr_generator_qr_img_stream($entity->getIncomingURL()->toString());
  $file = file_save_data($data, $dest_uri);

  // // Add logo to that image
  // if (isset($node->get('field_qr_logo')->target_id)) {
  //   $tmp_file = $file;
  //   $logo_file = File::load($node->get('field_qr_logo')->target_id);
  //   $file = _custom_qr_generator_add_logo_2_qr($file, $logo_file);
  //   $tmp_file->delete();
  //   $logo_file->delete();
  // }

  // Attach that new image with a node
  $entity->qr_img->setValue(array(
    'alt' => $entity->getIncomingURL(),
    'display' => '1',
    'target_id' => $file->id(),
  ));

  $entity->save();
}

/**
 * Implements hook_cron().
 */
function qr_generator_cron() {
  $client = new GuzzleHttp\Client();

  $qr_codes = QRGenerator::loadMultiple();
  $statuses = array();

  // Collect statuses and ID's
  foreach ($qr_codes as $qr_code) {
    try {
      $res = $client->request('GET', $qr_code->getOutgoingURL()->toString());
      $status = $res->getStatusCode();
    } catch (BadResponseException $e) {
      $status = $e->getResponse()->getStatusCode();
    } catch (RequestException $e) {
      $status = '?'; // Some other error
    }

    $status == '200' ? $status = 'OK' : $status = 'FAILED';

    $qr_code->setURLStatus($status);
    $qr_code->save();

    $statuses[$qr_code->id()] = $status;
	}
  qr_generator_send_status_mail($statuses);
}

function qr_generator_send_status_mail($statuses) {
  $failed = array();
  $to = '';

  $ids = \Drupal::entityQuery('user')
  ->condition('status', 1)
  ->condition('roles', 'Administrator')
  ->execute();
  $users = User::loadMultiple($ids);

  foreach ($users as $user) {
    $to .= $user->getEmail() . ',';
  }

  foreach ($statuses as $id => $status) {
    if ($status == 'FAILED') {
      $entity = QRGenerator::load($id);
      $failed[$id] = $entity->getName();
    }
  }

  if (!empty($failed)) {
    $mailManager = \Drupal::service('plugin.manager.mail');
    $module = 'qr_generator';
    $key = 'qr_code_status_failed';
    $langcode = \Drupal::currentUser()->getPreferredLangcode();
    $params['failed'] = $failed;
    $mailManager->mail($module, $key, $to, $langcode, $params, $send = FALSE);
  }
}

/**
 * Implements hook_mail().
 */
function qr_generator_mail($key, &$message, $params) {
  $options = array(
    'langcode' => $message['langcode'],
  );

  switch ($key) {
  case 'qr_code_status_failed':
    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
    $message['subject'] = t('Some QR code failed validation');
    $message['body'][] = SafeMarkup::checkPlain(t('The following QR codes failed:<br />'));
    $url = \Drupal::request()->getHost();;
    $message['body'][] = SafeMarkup::checkPlain('<ul>');
    foreach ($params['failed'] as $id => $title) {
      $message['body'][] = SafeMarkup::checkPlain('<li><a href="http://' . $url . '/admin/structure/qr_generator/' . $id . '/edit' . '">' . $title . "</a></li>");
    }
    $message['body'][] = SafeMarkup::checkPlain('</ul>');
    break;
  }
}

function qr_generator_qr_img_stream($msg) {
	$source_data = function($m) {
		ob_start();
		QRcode::png($m, false, 3, 5, 2);
		$result = ob_get_contents();
		ob_end_clean();

		return $result;
	};

	ob_start();
	header('Content-Type: image/png');

	$source_img = imagecreatefromstring($source_data($msg));
	$old_w = imagesx($source_img);
	$old_h = imagesy($source_img);
	$size = 200;
	$dest_img = imagecreatetruecolor($size, $size);

	imagecopyresampled($dest_img, $source_img, 0, 0, 0, 0, $size, $size, $old_w, $old_h);
	imagepng($dest_img);
	imagedestroy($dest_img);

	$content = ob_get_contents();
	ob_end_clean();

	return $content;
}

// function qr_generator_add_logo_2_qr($qr_img_obj, $qr_logo_obj) {
//
// 	ob_start();
// 	header('Content-type: image/png');
//
// 	$QR = imagecreatefromstring(file_get_contents($qr_img_obj->getFileUri()));
// 	$logo = imagecreatefromstring(file_get_contents($qr_logo_obj->getFileUri()));
//
// 	$QR_width = imagesx($QR);
// 	$QR_height = imagesy($QR);
// 	$logo_width = imagesx($logo);
// 	$logo_height = imagesy($logo);
//
// 	// Scale logo to fit in the QR Code
// 	if ($logo_width >= $logo_height) {
// 		$logo_qr_width = $QR_width / 2.3;
// 		$scale = $logo_width / $logo_qr_width;
// 		$logo_qr_height = $logo_height / $scale;
// 	} else {
// 		$logo_qr_height = $QR_height / 2.3;
// 		$scale = $logo_height / $logo_qr_height;
// 		$logo_qr_width = $logo_width / $scale;
// 	}
//
// 	imagecopyresampled(
// 		$QR, $logo,
// 		(($QR_width / 2) - ($logo_qr_width / 2)),
// 		(($QR_height / 2) - ($logo_qr_height / 2)),
// 		0, 0,
// 		$logo_qr_width, $logo_qr_height, $logo_width, $logo_height
// 	);
//
// 	imagepng($QR);
// 	imagedestroy($QR);
//
// 	$img_stream = ob_get_contents();
// 	ob_end_clean();
//
// 	$file = file_save_data($img_stream, $qr_img_obj->getFileUri());
// 	return $file;
// }
